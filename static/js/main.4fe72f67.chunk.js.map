{"version":3,"sources":["utils/getFullDate.js","components/Wrapper.js","components/Note.js","components/Button.js","components/List.js","components/Nav.js","components/App.js","serviceWorker.js","index.js"],"names":["getFullDate","d","Date","day","getDay","month","getMonth","getDate","getFullYear","Wrapper","props","id","className","list","children","Note","type","name","value","note","title","placeholder","onChange","date","body","Button","color","onClick","List","onToggle","notes","length","map","key","onSelected","e","onDelete","Nav","onToggleList","onNewNote","onSave","App","toggleList","setState","showList","state","handleChange","target","active","handleSave","editing","push","handleNew","newActive","now","handleSelected","filter","Number","handleDelete","stopPropagation","window","confirm","newNotes","newId","this","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4fe72f67.chunk.js","sourcesContent":["const getFullDate = () => {\n    let d = new Date()\n    let day = [\n        'Monday',\n        'Tuesday',\n        'Wednesday',\n        'Thursday',\n        'Friday',\n        'Saturday',\n        'Sunday',\n    ][d.getDay() - 1]\n\n    let month = [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n    ][d.getMonth() - 1]\n\n    return `${day} ${d.getDate()} ${month} ${d.getFullYear()}`\n}\n\nexport default getFullDate\n","import React from 'react'\n//\nconst Wrapper = props => <main id=\"content\" className={ props.list ? 'list--open' : '' }>{props.children}</main>\n\nexport default Wrapper\n","import React from 'react'\n//\nconst Note = props => (\n    <div id=\"note\">\n        <section className=\"note__title\">\n            <div className=\"container\">\n                <input\n                    type=\"text\"\n                    name=\"title\"\n                    value={props.note.title}\n                    placeholder=\"Title...\"\n                    onChange={props.onChange}\n                />\n            </div>\n        </section>\n        <section className=\"note__body\">\n            <div className=\"container\">\n                <label>{props.note.date}</label>\n                <textarea\n                    name=\"body\"\n                    value={props.note.body}\n                    onChange={props.onChange}\n                    placeholder=\"What's on your mind?...\"\n                ></textarea>\n            </div>\n        </section>\n    </div>\n)\n\nexport default Note\n","import React from 'react'\n//\nconst Button = props => (\n    <div className={`btn btn--${props.color}`} title={props.title} onClick={props.onClick}>\n        {props.children}\n    </div>\n)\n\nexport default Button\n","import React from 'react'\nimport Button from './Button'\n//\nconst List = props => {\n    return (\n        <div id=\"list\">\n            <div className=\"list__header\">\n                <h2>Your notes</h2>\n                <Button title=\"close\" onClick={props.onToggle}>\n                    &#8592;\n                </Button>\n            </div>\n            <div className=\"list__container\">\n                {props.notes.length > 0 ? (\n                    props.notes.map(note => (\n                        <div\n                            key={note.id}\n                            id={note.id}\n                            className=\"list__item\"\n                            onClick={props.onSelected}\n                        >\n                            {note.title}\n                            <Button\n                                title=\"delete\"\n                                onClick={e => props.onDelete(e, note.id)}\n                            >\n                                &#10008;\n                            </Button>\n                        </div>\n                    ))\n                ) : (\n                    <label>0 Notes...</label>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default List\n","import React from 'react'\nimport Button from './Button'\n//\nconst Nav = props => {\n    return (\n        <div id=\"nav\">\n            <Button title=\"List\" onClick={props.onToggleList}>\n                =\n            </Button>\n            <Button title=\"Add new\" onClick={props.onNewNote}>\n                +\n            </Button>\n            <Button title=\"Save\" onClick={props.onSave}>\n                &#10004;\n            </Button>\n        </div>\n    )\n}\nexport default Nav\n","import React, { Component } from 'react'\nimport getFullDate from '../utils/getFullDate'\nimport Wrapper from './Wrapper'\nimport Note from './Note'\nimport List from './List'\nimport Nav from './Nav'\n//\nclass App extends Component {\n    constructor() {\n        super()\n        this.newId = Date.now()\n        this.state = {\n            active: {\n                id: this.newId,\n                title: '',\n                body: '',\n                date: getFullDate(),\n            },\n            notes: [],\n            editing: false,\n            showList: false,\n        }\n    }\n\n    toggleList = e => {\n        this.setState({ showList: !this.state.showList })\n    }\n\n    handleChange = e => {\n        let { name, value } = e.target\n        let active = this.state.active\n        active[name] = value\n        this.setState({ active: active })\n    }\n\n    handleSave = () => {\n        if (this.state.active.title === '' && this.state.active.body === '') {\n            return false\n        }\n\n        let notes = [...this.state.notes]\n        if (this.state.editing) {\n            notes[this.state.active.id] = this.state.active\n        } else {\n            notes.push(this.state.active)\n        }\n\n        this.setState({ notes: notes, editing: true })\n    }\n\n    handleNew = () => {\n        let newActive = {\n            id: Date.now(),\n            title: '',\n            body: '',\n            date: getFullDate(),\n        }\n        this.setState({ active: newActive, editing: false })\n    }\n\n    handleSelected = e => {\n        let notes = [...this.state.notes]\n        let newActive = notes.filter(note => note.id === Number(e.target.id))[0]\n        this.setState({ active: newActive, editing: true })\n    }\n\n    handleDelete = (e, id) => {\n        e.stopPropagation()\n        if (window.confirm('Are you sure you wish to delete this note?')) {\n            let notes = [...this.state.notes]\n            let newNotes = notes.filter(note => note.id !== id)\n\n            this.setState({ notes: newNotes })\n            this.handleNew()\n        }\n    }\n\n    render() {\n        return (\n            <Wrapper list={this.state.showList}>\n                <List\n                    notes={this.state.notes}\n                    onSelected={this.handleSelected}\n                    onToggle={this.toggleList}\n                    onDelete={this.handleDelete}\n                ></List>\n                <Note note={this.state.active} onChange={this.handleChange} />\n                <Nav\n                    onToggleList={this.toggleList}\n                    active={this.state.active}\n                    onNewNote={this.handleNew}\n                    onSave={this.handleSave}\n                />\n            </Wrapper>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.scss'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}